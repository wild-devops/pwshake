templates:
  python:
    parameters:
      file:
      options:
    cmd: |
      python [[file]] [[options]]
  dotnet:
    parameters:
      command:
      options: --version
    cmd: |
      dotnet [[command]] [[options]]
  msbuild:
    parameters:
      project: /version
      targets:
      properties:
      options:
    pwsh: |
      $cmd = if (${is-Linux}) {'dotnet msbuild'} else {'msbuild'}
      if ($step.parameters.project) {
        $cmd += " $($step.parameters.project)"
      }
      if ($step.parameters.targets) {
        foreach ($target in $step.parameters.targets) {
          $cmd += " /t:$target"
        }
      }
      if ($step.parameters.properties) {
        foreach ($property in $step.parameters.properties) {
          $cmd += " /p:$property"
        }
      }
      if ($step.parameters.options) {
        foreach ($option in $step.parameters.options) {
          $cmd += " $option"
        }
      }
      $cmd | Cmd-Shell

  transform_xml_file:
    parameters:
      path:
      appends:
      updates:
      removes:
    pwsh: |
      $path = $step.parameters.path
      $appends = $step.parameters.appends
      $updates = $step.parameters.updates
      $removes = $step.parameters.removes
      Write-Host "Transforming file '$(Resolve-Path $path)'"
      $xml = [xml](Get-Content (Resolve-Path $path) -Raw)
      if ($appends) {
        foreach ($key in $appends.Keys) {
          foreach ($node in $xml.SelectNodes($key)) {
            Write-Host "Appending xml '$($appends[$key])' to node '$key'"
            $node.InnerXml += $appends[$key]
          }
        }
      }
      if ($updates) {
        foreach ($key in $updates.Keys) {
          foreach ($node in $xml.SelectNodes($key)) {
            Write-Host "Updating node '$key' with value '$($updates[$key])'"
            if ($node.NodeType -eq 'Element') {
              $node.InnerXml = $updates[$key]
            } else {
              $node.Value = $updates[$key]
            }
          }
        }
      }
      if ($removes) {
        foreach ($key in $removes.Keys) {
          foreach ($node in $xml.SelectNodes($key)) {
            Write-Host "Removing node '$key'"
            $node | ForEach-Object { $_.ParentNode.RemoveChild($_) } | Out-Null
          }
        }
      }
      $xml.Save((Resolve-Path $path))
